# Generated by Django 4.2.2 on 2023-07-03 14:52

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

import core.services.upload_avatar_service


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AvatarModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('avatar', models.ImageField(blank=True, upload_to=core.services.upload_avatar_service.upload_avatar)),
            ],
            options={
                'db_table': 'avatars',
            },
        ),
        migrations.CreateModel(
            name='ProfileModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('^[А-ЯЁІЇЄҐ][А-яёЁіІєЄїЇґҐ]{1,49}$', ['Only cyrillic', 'First letter uppercase', 'min 2 max 50 ch'])])),
                ('surname', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('^[А-ЯЁІЇЄҐ][А-яёЁіІєЄїЇґҐ]{1,49}$', ['Only cyrillic', 'First letter uppercase', 'min 2 max 50 ch'])])),
                ('age', models.IntegerField(validators=[django.core.validators.MinValueValidator(16), django.core.validators.MaxValueValidator(150)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('avatars', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='users.avatarmodel')),
            ],
            options={
                'db_table': 'profile',
            },
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator('(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=(?:.*[`~!@#$%^&*()\\-_+=\\\\\\|\\\'\\"\\;\\:\\/?.>,<\\[\\]\\{\\}]){2,})[a-zA-Z\\d`~!@#$%^&*()\\-_+=\\\\\\|\\\'\\"\\;\\:\\/?.>,<\\[\\]\\{\\}]{8,30}', ['min 1 lowercase ch', 'min 1 uppercase ch', 'min 1 digit', 'min 2 special character', 'length 8-30'])])),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('profile', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user', to='users.profilemodel')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
                'ordering': ('id',),
            },
        ),
    ]
